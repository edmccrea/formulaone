generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bets {
  user_id BigInt
  race_id BigInt
  first   String
  second  String
  third   String
  bet_id  BigInt @default(autoincrement())

  @@id([race_id, user_id, bet_id])
}

model races {
  race_id         BigInt     @id(map: "Race_pkey") @default(autoincrement())
  race_name       String
  race_date       String
  country_flag    String
  qualifying_date String
  location        String
  track_name      String
  race_image      String
  track_layout    String     @default("abc")
  calendar_round  Int
  race_time       String
  qualifying_time String
  race_type       String
  comments        comments[]
  grids           grids[]
  results         results?
}

model results {
  race_id BigInt @id(map: "Result_pkey")
  first   String
  second  String
  third   String
  races   races  @relation(fields: [race_id], references: [race_id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  user_id         BigInt     @id(map: "User_pkey") @default(autoincrement())
  username        String
  password        String
  avatar          String
  points          Float      @db.Real
  position        Int
  session         String?
  constructor_bet String     @default("Red Bull")
  admin           Boolean    @default(false)
  comments        comments[]
}

model grids {
  id      BigInt @id @default(autoincrement())
  race_id BigInt
  grid    String
  races   races  @relation(fields: [race_id], references: [race_id], onDelete: NoAction, onUpdate: NoAction)
}

model comments {
  id         Int      @id @default(autoincrement())
  race_id    BigInt?
  user_id    BigInt?
  created_at DateTime @db.Timestamptz(6)
  comment    String
  username   String
  avatar     String
  races      races?   @relation(fields: [race_id], references: [race_id], onDelete: NoAction, onUpdate: NoAction)
  users      users?   @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}
